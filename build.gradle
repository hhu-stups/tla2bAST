apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'findbugs'

project.version = '1.0.8'
project.group = 'de.hhu.stups'
project.archivesBaseName = "tla2bAST"

project.sourceCompatibility = '1.7'
project.targetCompatibility = '1.7'


repositories {
	mavenCentral()
        maven {
		name "sonatype snapshots"
		url "https://oss.sonatype.org/content/repositories/snapshots"
	}
	maven {
		name "sonatype releases"
		url "https://oss.sonatype.org/content/repositories/releases"
	}
}

configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
   }
 
def parser_version = '2.5.1'
def tlatools_version = '1.0.2'

dependencies {
	
	compile 'commons-cli:commons-cli:1.2'
	compile (group: 'de.hhu.stups', name: 'tlatools', version: tlatools_version)
	compile (group: 'de.hhu.stups', name: 'prologlib', version: parser_version)
	compile (group: 'de.hhu.stups', name: 'parserbase', version: parser_version)
	compile (group: 'de.hhu.stups', name: 'bparser', version: parser_version)
	compile (group: 'de.hhu.stups', name: 'ltlparser', version: parser_version)


	testCompile (group: 'junit', name: 'junit', version: '4.12')
}

jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

// type 'gradle tla2b jacocoIntegrationTestReport' in order to run the jacoco code coverage analysis
task jacocoIntegrationTestReport(type: JacocoReport) {
	sourceSets sourceSets.main
	//executionData files('build/jacoco/integrationTests.exec')
	executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
 }

tasks.withType(FindBugs) {
	// disable findbugs by default
	// in order to run findbugs type 'gradle tlc4b findbugsMain findbugsTest'
	task -> enabled = gradle.startParameter.taskNames.contains(task.name)
    reports {
        xml.enabled = false
        html.enabled = true
    }
	ignoreFailures = true
}


test {
	exclude('testing')
	//allJvmArgs = [ "-Xss515m" ]
}


task createJar(type: Jar, dependsOn: build){
	archiveName = 'TLA2B.jar'
	//from sourceSets.main.allJava
	from sourceSets.main.output
	from {configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	exclude('**/*.java')
	manifest {
		attributes "Main-Class" : 'de.tla2b.TLA2B'
	}
}


task tla2b(dependsOn: createJar) << {
        copy {
		from('build/libs/')
		into('.')
 		include('TLA2B.jar')
 	}
}

if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {

apply plugin: 'signing'

signing {
    sign configurations.archives
}

javadoc {
	failOnError = false
}

task javadocJar(type: Jar) {
	 classifier = 'javadoc'
	 from javadoc
}

task sourcesJar(type: Jar) {
	 classifier = 'sources'
	 from sourceSets.main.allSource
}

artifacts {
	 archives javadocJar, sourcesJar
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'TLA+ to B-AST'
        packaging 'jar'
        // optionally artifactId can be defined here
        description "Translator from TLA+ to ProB's AST representation."
        url 'https://github.com/hhu-stups/tla2bAST'

        licenses {
          license {
            name 'Eclipse Public License, Version 1.0'
            url 'https://www.eclipse.org/legal/epl-v10.html'
          }
        }

        scm {
          connection 'scm:git:git://github.com/hhu-stups/tla2bAST.git'
          developerConnection 'scm:git:git@github.com:hhu-stups/tla2bAST.git'
          url 'https://github.com/hhu-stups/tla2bAST'
        }


        developers {
          developer {
            id 'bendisposto'
            name 'Jens Bendisposto'
            email 'jens@bendisposto.de'
          }
        }
      }
    }
  }
}
}
